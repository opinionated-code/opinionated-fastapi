{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Opinionated FastAPI This package provides some additional tools and a layer of abstraction on top of the excellent FastAPI, with some highly opinionated features. For most cases, opinionated.fastapi provides only one way of solving a thing - the ORM is SQLAlchemy, the error tracking platform is Sentry, the ASGI server is Uvicorn. The aim is to provide a \"batteries included\" solution, with sensible defaults. A specific objective is to ensure that the package works well in two types of environments - extremely embedded ones where the entire application should be able to run in a single process (with child processes for the web, worker, scheduling, etc) and extremely scalable environments like Docker or Kubernetes, where each child process has its own container and/or pod to run in. Features Here are some key features: Settings : Pydantic-based settings, with sensible defaults and configured via environment variable or command line (a la Django). Error Reporting : Built-in Sentry support, including integrations Task Queues : Asynchronous queued tasks via Dramatiq worker processes Scheduled Tasks : Scheduled tasks via a custom APScheduler implementation ORM Support : SQLAlchemy 1.4 (using the 2.0 \"future\" APIs) ORM Migrations : Pre-configured Alembic environment to manage migrations Command Line Tool : A management command (fastapi-admin) that provides access to a variety of processes and actions, and is extensible for custom commands ASGI Web Server : Pre-configured Uvicorn support Web Process Manager : Gunicorn support for process management in production Deployment : Docker and Kubernetes build and deployment tools File Structure : An opinionated file structure to help simplify understanding of complex projects Embedded Friendly : The ability to run via a single command, that can spawn child processes as needed. Guiding Principles Here are some guiding principles for this project, that I use to help me decide how I'm going to approach any particular feature/enhancement: Be extremely opinionated; FastAPI provides the opposite of this, which is great! But for this project, I specifically want to be absolutely opinionated - i.e. pick one way to solve a problem and only implement that one way. If a better option arises, the existing implementation will be replaced (although ideally encapsulated if that's possible). An example would be using Dramatiq, which I prefer over Celery. Rather than support both, the project only supports Dramatiq, but we coul change in future if a compelling reason arises. Focus on Code over Configuration; where possible, we avoid configuration files other than pyproject.toml, and try to do most things in code instead Adhere to the principles of 12factor app design (see https://12factor.net/ ) Requirements Python 3.8 and 3.9 are supported. Python 3.6 and 3.7 probably work, but we do not actively support it. Installation pip install opinionated-fastapi I encourage the use of virtual environments, in particular I recommend using poetry: poetry init poetry add opinionated-fastapi Example I recommend using the cookiecutter template to get a complete filesystem layout. Alternatively, assuming you already have a virtualenv set up, a minimal example can be set up as follows: Create a 'my_app' package, and add a module in the package called 'config.py': from opinionated.fastapi import DefaultSettings class Development ( DefaultSettings ): APPS = [ \"my_app\" , ] In the 'my_app' package, create a module 'controllers.py': from fastapi import APIRouter , HTTPException router = APIRouter ( tags = [ \"auth\" ]) @router . post ( \"/ping\" ) def ping (): return { \"detail\" : \"pong\" } You can run this minimal example with the develop command: fastapi-admin --config=my_app.config --setting=Development develop Alternatively you can use environment varibales: export FASTAPI_CONFIG_MODULE=\"my_app.config\" export FASTAPI_SETTING=Development fastapi-admin develop Related Projects Related to this project, there is also a cookiecutter template which provides a standard project design with features like static analysis, tests, GitHub Actions support, etc.","title":"Home"},{"location":"#opinionated-fastapi","text":"This package provides some additional tools and a layer of abstraction on top of the excellent FastAPI, with some highly opinionated features. For most cases, opinionated.fastapi provides only one way of solving a thing - the ORM is SQLAlchemy, the error tracking platform is Sentry, the ASGI server is Uvicorn. The aim is to provide a \"batteries included\" solution, with sensible defaults. A specific objective is to ensure that the package works well in two types of environments - extremely embedded ones where the entire application should be able to run in a single process (with child processes for the web, worker, scheduling, etc) and extremely scalable environments like Docker or Kubernetes, where each child process has its own container and/or pod to run in.","title":"Opinionated FastAPI"},{"location":"#features","text":"Here are some key features: Settings : Pydantic-based settings, with sensible defaults and configured via environment variable or command line (a la Django). Error Reporting : Built-in Sentry support, including integrations Task Queues : Asynchronous queued tasks via Dramatiq worker processes Scheduled Tasks : Scheduled tasks via a custom APScheduler implementation ORM Support : SQLAlchemy 1.4 (using the 2.0 \"future\" APIs) ORM Migrations : Pre-configured Alembic environment to manage migrations Command Line Tool : A management command (fastapi-admin) that provides access to a variety of processes and actions, and is extensible for custom commands ASGI Web Server : Pre-configured Uvicorn support Web Process Manager : Gunicorn support for process management in production Deployment : Docker and Kubernetes build and deployment tools File Structure : An opinionated file structure to help simplify understanding of complex projects Embedded Friendly : The ability to run via a single command, that can spawn child processes as needed.","title":"Features"},{"location":"#guiding-principles","text":"Here are some guiding principles for this project, that I use to help me decide how I'm going to approach any particular feature/enhancement: Be extremely opinionated; FastAPI provides the opposite of this, which is great! But for this project, I specifically want to be absolutely opinionated - i.e. pick one way to solve a problem and only implement that one way. If a better option arises, the existing implementation will be replaced (although ideally encapsulated if that's possible). An example would be using Dramatiq, which I prefer over Celery. Rather than support both, the project only supports Dramatiq, but we coul change in future if a compelling reason arises. Focus on Code over Configuration; where possible, we avoid configuration files other than pyproject.toml, and try to do most things in code instead Adhere to the principles of 12factor app design (see https://12factor.net/ )","title":"Guiding Principles"},{"location":"#requirements","text":"Python 3.8 and 3.9 are supported. Python 3.6 and 3.7 probably work, but we do not actively support it.","title":"Requirements"},{"location":"#installation","text":"pip install opinionated-fastapi I encourage the use of virtual environments, in particular I recommend using poetry: poetry init poetry add opinionated-fastapi","title":"Installation"},{"location":"#example","text":"I recommend using the cookiecutter template to get a complete filesystem layout. Alternatively, assuming you already have a virtualenv set up, a minimal example can be set up as follows: Create a 'my_app' package, and add a module in the package called 'config.py': from opinionated.fastapi import DefaultSettings class Development ( DefaultSettings ): APPS = [ \"my_app\" , ] In the 'my_app' package, create a module 'controllers.py': from fastapi import APIRouter , HTTPException router = APIRouter ( tags = [ \"auth\" ]) @router . post ( \"/ping\" ) def ping (): return { \"detail\" : \"pong\" } You can run this minimal example with the develop command: fastapi-admin --config=my_app.config --setting=Development develop Alternatively you can use environment varibales: export FASTAPI_CONFIG_MODULE=\"my_app.config\" export FASTAPI_SETTING=Development fastapi-admin develop","title":"Example"},{"location":"#related-projects","text":"Related to this project, there is also a cookiecutter template which provides a standard project design with features like static analysis, tests, GitHub Actions support, etc.","title":"Related Projects"},{"location":"contributing/","text":"How to contribute Dependencies We use poetry to manage dependencies. Once you have it installed, set up a virtualenv and install this project's dependencies by running the install command: poetry install To activate your virtualenv run poetry shell , or run commands individually with poetry run . Code Style We use Black with default options - make sure you run it on any code before committing. Documentation All docstrings are in Google style, as we use mkdocstrings for the API documentation. Static Analysis We use mypy for type checking. It is configured via pyproject.toml, and you can run it easily: mypy Tests We use pytest. Run the test suite with: pytest Linting We don't currently run any additional linting beyond code style with Black. Submitting your code We use standard github style fork-and-pull-request for submissions. When creating a pull request for a submission: Run mypy and pytest to make sure everything was working before making changes. This is important as it can expose issues in your local dev environment, even if code is passing all tests in the CI pipeline. Add any changes you want. Try to break up changes into multiple commits where it makes sense to do so. Write comments to explain the \"why\" of your changes - if you need to comment what it is doing, it might not help. Add tests for the new changes. Edit documentation where the change alters the behaviour of the code in any significant way. Update CHANGELOG.md with a quick summary of your changes. Run pytest again to make sure it is still working. Run mypy to ensure that types are correct. Run black to ensure that code style is correct.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"","title":"How to contribute"},{"location":"contributing/#dependencies","text":"We use poetry to manage dependencies. Once you have it installed, set up a virtualenv and install this project's dependencies by running the install command: poetry install To activate your virtualenv run poetry shell , or run commands individually with poetry run .","title":"Dependencies"},{"location":"contributing/#code-style","text":"We use Black with default options - make sure you run it on any code before committing.","title":"Code Style"},{"location":"contributing/#documentation","text":"All docstrings are in Google style, as we use mkdocstrings for the API documentation.","title":"Documentation"},{"location":"contributing/#static-analysis","text":"We use mypy for type checking. It is configured via pyproject.toml, and you can run it easily: mypy","title":"Static Analysis"},{"location":"contributing/#tests","text":"We use pytest. Run the test suite with: pytest","title":"Tests"},{"location":"contributing/#linting","text":"We don't currently run any additional linting beyond code style with Black.","title":"Linting"},{"location":"contributing/#submitting-your-code","text":"We use standard github style fork-and-pull-request for submissions. When creating a pull request for a submission: Run mypy and pytest to make sure everything was working before making changes. This is important as it can expose issues in your local dev environment, even if code is passing all tests in the CI pipeline. Add any changes you want. Try to break up changes into multiple commits where it makes sense to do so. Write comments to explain the \"why\" of your changes - if you need to comment what it is doing, it might not help. Add tests for the new changes. Edit documentation where the change alters the behaviour of the code in any significant way. Update CHANGELOG.md with a quick summary of your changes. Run pytest again to make sure it is still working. Run mypy to ensure that types are correct. Run black to ensure that code style is correct.","title":"Submitting your code"},{"location":"fastapi-admin/","text":"fastapi-admin Usage: [OPTIONS] COMMAND [ARGS]... Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. audit Usage: audit [OPTIONS] backups Usage: backups [OPTIONS] checktypes Usage: checktypes [OPTIONS] dbshell Usage: dbshell [OPTIONS] develop Usage: develop [OPTIONS] Options: --hostname TEXT [default: 127.0.0.1] --port INTEGER [default: 5000] --reload / --no-reload [default: True] format Usage: format [OPTIONS] ARGS... Options: ARGS... [required] generate Usage: generate [OPTIONS] runscheduler Usage: runscheduler [OPTIONS] runserver Usage: runserver [OPTIONS] runworker Usage: runworker [OPTIONS] Options: --hostname TEXT [default: 127.0.0.1] --processes INTEGER [default: 2] --reload / --no-reload [default: True] shell Usage: shell [OPTIONS] test Usage: test [OPTIONS] update Usage: update [OPTIONS]","title":"Command Line"},{"location":"fastapi-admin/#fastapi-admin","text":"Usage: [OPTIONS] COMMAND [ARGS]... Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation.","title":"fastapi-admin"},{"location":"fastapi-admin/#audit","text":"Usage: audit [OPTIONS]","title":"audit"},{"location":"fastapi-admin/#backups","text":"Usage: backups [OPTIONS]","title":"backups"},{"location":"fastapi-admin/#checktypes","text":"Usage: checktypes [OPTIONS]","title":"checktypes"},{"location":"fastapi-admin/#dbshell","text":"Usage: dbshell [OPTIONS]","title":"dbshell"},{"location":"fastapi-admin/#develop","text":"Usage: develop [OPTIONS] Options: --hostname TEXT [default: 127.0.0.1] --port INTEGER [default: 5000] --reload / --no-reload [default: True]","title":"develop"},{"location":"fastapi-admin/#format","text":"Usage: format [OPTIONS] ARGS... Options: ARGS... [required]","title":"format"},{"location":"fastapi-admin/#generate","text":"Usage: generate [OPTIONS]","title":"generate"},{"location":"fastapi-admin/#runscheduler","text":"Usage: runscheduler [OPTIONS]","title":"runscheduler"},{"location":"fastapi-admin/#runserver","text":"Usage: runserver [OPTIONS]","title":"runserver"},{"location":"fastapi-admin/#runworker","text":"Usage: runworker [OPTIONS] Options: --hostname TEXT [default: 127.0.0.1] --processes INTEGER [default: 2] --reload / --no-reload [default: True]","title":"runworker"},{"location":"fastapi-admin/#shell","text":"Usage: shell [OPTIONS]","title":"shell"},{"location":"fastapi-admin/#test","text":"Usage: test [OPTIONS]","title":"test"},{"location":"fastapi-admin/#update","text":"Usage: update [OPTIONS]","title":"update"},{"location":"getting-started/","text":"","title":"Getting Started"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2021 Daniel Sloan, Lucid Horizons Pty Ltd Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"opinionated-fastapi/","text":"opinionated.fastapi special A package built on top of FastAPI to provide some highly opinionated features. This package provides some additional tools and a layer of abstraction on top of FastAPI, with some highly opinionated features. For most cases, opinionated.fastapi provides only one way of solving a thing - the ORM is SQLAlchemy, the error tracking platform is Sentry, the ASGI server is Uvicorn. The aim is to provide a \"batteries included\" solution. This software is licensed under the MIT License . Copyright (c) 2021 Daniel Sloan, Lucid Horizons Pty Ltd opinionated.fastapi.app Default app module used if there isn't a custom one defined and referenced in the settings object. This module defines an 'app' variable that is a default instance of the OpinionatedFastAPI class. If an application wants to define custom behaviour, it can create its own app.py and sub-class OpinionatedFastAPI, otherwise this module provides a sensible default option. app Default app module used if there isn't a custom one defined and referenced in the settings object. This module defines an 'app' variable that is a default instance of the OpinionatedFastAPI class. If an application wants to define custom behaviour, it can create its own app.py and sub-class OpinionatedFastAPI, otherwise this module provides a sensible default option. bootstrap bootstrap The setup() function sets up the FastAPI environment and loads configuration values, etc. It only executes once - if run a second time, it will just return without doing anything. We have a bunch of things we do for any of our processes, whether it be a webserver, CLI, dramatiq worker, etc. The most important thing we do is instantiate the correct settings object based on environment variables. Then we set up the ORM, the task broker, and so on. load_commands () During bootstrap, load all command modules specified in the settings, or autodiscover them load_modules ( apps , mod_name = None , mods = None ) Generic function to load modules from apps and dedicated config paths setup () Set up the FastAPI environment commands commands Library functions to handle the \"manage.py\" fastapi commands. config config Utilities for managing FastAPI settings module(s) SettingsProxy When you do 'from config import settings', we need to either have already initialized the value in this module, or we need to use a proxy like this one. The proxy allows us to late-load the settings object in init_config(). We could technically get away with directly assigning settings, but there would be other problems that would create. This solution retains the most flexibility. __getattr__ ( self , name ) special Return attributes from the proxy object if there is one, otherwise raise an error db BaseModel Base abstract model we use to create all other models default_settings DefaultSettings pydantic-model Default settings for FastAPI application migrations run_migrations_offline () Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. run_migrations_online () Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. scheduler scheduler A small module that wraps APScheduler and helps manage scheduling of tasks, in concert with Dramatiq which provides the async execution handling. This can be used either via decorator to set static schedules for tasks to execute on, or programmatically to request a task be scheduled dynamically (which will then be kept persistently in the database). CustomScheduler shutdown ( self , wait = True ) Shuts down the scheduler, along with its executors and job stores. Does not interrupt any currently running jobs. :param bool wait: True to wait until all currently executing jobs have finished :raises SchedulerNotRunningError: if the scheduler has not been started yet start ( self , * args , ** kwargs ) Start the configured executors and job stores and begin processing scheduled jobs. :param bool paused: if True , don't start job processing until :meth: resume is called :raises SchedulerAlreadyRunningError: if the scheduler is already running :raises RuntimeError: if running under uWSGI with threads disabled wakeup ( self ) Custom wakeup that sets event flag if we're in runscheduler, or otherwise sends a dramatiq event CustomWorker A custom dramatiq worker that overrides the normal actor mechanism and uses our own callback CustomWorkerThread process_message ( self , message ) Custom version of process_message that is specific to the scheduler. run_scheduler () Run a scheduler process, this should be a separate process and only one should be running at any time. sentry init_sentry () Initialize sentry on application startup setup_sentry_middleware ( app ) Add sentry middleware to FastAPI application tasks setup_dramatiq () Called by dramatiq worker. Do NOT run this function from anywhere else","title":"API Reference"},{"location":"opinionated-fastapi/#opinionated.fastapi.app","text":"Default app module used if there isn't a custom one defined and referenced in the settings object. This module defines an 'app' variable that is a default instance of the OpinionatedFastAPI class. If an application wants to define custom behaviour, it can create its own app.py and sub-class OpinionatedFastAPI, otherwise this module provides a sensible default option.","title":"app"},{"location":"opinionated-fastapi/#opinionated.fastapi.app","text":"Default app module used if there isn't a custom one defined and referenced in the settings object. This module defines an 'app' variable that is a default instance of the OpinionatedFastAPI class. If an application wants to define custom behaviour, it can create its own app.py and sub-class OpinionatedFastAPI, otherwise this module provides a sensible default option.","title":"app"},{"location":"opinionated-fastapi/#opinionated.fastapi.bootstrap","text":"bootstrap The setup() function sets up the FastAPI environment and loads configuration values, etc. It only executes once - if run a second time, it will just return without doing anything. We have a bunch of things we do for any of our processes, whether it be a webserver, CLI, dramatiq worker, etc. The most important thing we do is instantiate the correct settings object based on environment variables. Then we set up the ORM, the task broker, and so on.","title":"bootstrap"},{"location":"opinionated-fastapi/#opinionated.fastapi.bootstrap.load_commands","text":"During bootstrap, load all command modules specified in the settings, or autodiscover them","title":"load_commands()"},{"location":"opinionated-fastapi/#opinionated.fastapi.bootstrap.load_modules","text":"Generic function to load modules from apps and dedicated config paths","title":"load_modules()"},{"location":"opinionated-fastapi/#opinionated.fastapi.bootstrap.setup","text":"Set up the FastAPI environment","title":"setup()"},{"location":"opinionated-fastapi/#opinionated.fastapi.commands","text":"commands Library functions to handle the \"manage.py\" fastapi commands.","title":"commands"},{"location":"opinionated-fastapi/#opinionated.fastapi.config","text":"config Utilities for managing FastAPI settings module(s)","title":"config"},{"location":"opinionated-fastapi/#opinionated.fastapi.config.SettingsProxy","text":"When you do 'from config import settings', we need to either have already initialized the value in this module, or we need to use a proxy like this one. The proxy allows us to late-load the settings object in init_config(). We could technically get away with directly assigning settings, but there would be other problems that would create. This solution retains the most flexibility.","title":"SettingsProxy"},{"location":"opinionated-fastapi/#opinionated.fastapi.config.SettingsProxy.__getattr__","text":"Return attributes from the proxy object if there is one, otherwise raise an error","title":"__getattr__()"},{"location":"opinionated-fastapi/#opinionated.fastapi.db","text":"","title":"db"},{"location":"opinionated-fastapi/#opinionated.fastapi.db.BaseModel","text":"Base abstract model we use to create all other models","title":"BaseModel"},{"location":"opinionated-fastapi/#opinionated.fastapi.default_settings","text":"","title":"default_settings"},{"location":"opinionated-fastapi/#opinionated.fastapi.default_settings.DefaultSettings","text":"Default settings for FastAPI application","title":"DefaultSettings"},{"location":"opinionated-fastapi/#opinionated.fastapi.migrations","text":"","title":"migrations"},{"location":"opinionated-fastapi/#opinionated.fastapi.migrations.run_migrations_offline","text":"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output.","title":"run_migrations_offline()"},{"location":"opinionated-fastapi/#opinionated.fastapi.migrations.run_migrations_online","text":"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context.","title":"run_migrations_online()"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler","text":"scheduler A small module that wraps APScheduler and helps manage scheduling of tasks, in concert with Dramatiq which provides the async execution handling. This can be used either via decorator to set static schedules for tasks to execute on, or programmatically to request a task be scheduled dynamically (which will then be kept persistently in the database).","title":"scheduler"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomScheduler","text":"","title":"CustomScheduler"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomScheduler.shutdown","text":"Shuts down the scheduler, along with its executors and job stores. Does not interrupt any currently running jobs. :param bool wait: True to wait until all currently executing jobs have finished :raises SchedulerNotRunningError: if the scheduler has not been started yet","title":"shutdown()"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomScheduler.start","text":"Start the configured executors and job stores and begin processing scheduled jobs. :param bool paused: if True , don't start job processing until :meth: resume is called :raises SchedulerAlreadyRunningError: if the scheduler is already running :raises RuntimeError: if running under uWSGI with threads disabled","title":"start()"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomScheduler.wakeup","text":"Custom wakeup that sets event flag if we're in runscheduler, or otherwise sends a dramatiq event","title":"wakeup()"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomWorker","text":"A custom dramatiq worker that overrides the normal actor mechanism and uses our own callback","title":"CustomWorker"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomWorkerThread","text":"","title":"CustomWorkerThread"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.CustomWorkerThread.process_message","text":"Custom version of process_message that is specific to the scheduler.","title":"process_message()"},{"location":"opinionated-fastapi/#opinionated.fastapi.scheduler.run_scheduler","text":"Run a scheduler process, this should be a separate process and only one should be running at any time.","title":"run_scheduler()"},{"location":"opinionated-fastapi/#opinionated.fastapi.sentry","text":"","title":"sentry"},{"location":"opinionated-fastapi/#opinionated.fastapi.sentry.init_sentry","text":"Initialize sentry on application startup","title":"init_sentry()"},{"location":"opinionated-fastapi/#opinionated.fastapi.sentry.setup_sentry_middleware","text":"Add sentry middleware to FastAPI application","title":"setup_sentry_middleware()"},{"location":"opinionated-fastapi/#opinionated.fastapi.tasks","text":"","title":"tasks"},{"location":"opinionated-fastapi/#opinionated.fastapi.tasks.setup_dramatiq","text":"Called by dramatiq worker. Do NOT run this function from anywhere else","title":"setup_dramatiq()"},{"location":"release-notes/","text":"Version history We follow Semantic Versions . Version 0.0.1 Initial build. This should not be deemed a \"real\" release as much work is still to be done.","title":"Release Notes"},{"location":"release-notes/#version-history","text":"We follow Semantic Versions .","title":"Version history"},{"location":"release-notes/#version-001","text":"Initial build. This should not be deemed a \"real\" release as much work is still to be done.","title":"Version 0.0.1"}]}